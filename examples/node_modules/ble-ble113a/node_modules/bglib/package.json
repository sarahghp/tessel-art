{
  "name": "bglib",
  "version": "0.0.6",
  "description": "Create and parse packets for the BlueGiga BLE112 and BLE113",
  "main": "bglib.js",
  "scripts": {
    "test": "./test/test.js"
  },
  "author": {
    "name": "Jon McKay",
    "email": "jon@technical.io"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "directories": {
    "lib": "libraries",
    "test": "Test script"
  },
  "hardware": {
    "./test": false
  },
  "keywords": [
    "bluetooth",
    "ble",
    "ble112",
    "ble113",
    "bluegiga",
    "low",
    "energy"
  ],
  "dependencies": {
    "bleadvertise": "*"
  },
  "readme": "##BGLib\nBGLib is a Node library for sending and receiving packets from BlueGiga BLE devices (currently supports ble112 and ble113). It is currently being developed by Technical Machine to support our Tessel BLE module.\n\n##Install\n```\nnpm install bglib\n```\n\n\n##Examples\n\n###Creating a packet\n\n```\nvar bg = require('bglib');\n\nvar bglib = new bg()\nbglib.getPacket(bg.api.systemHello, function(err, packet) {\n  console.log(packet.getByteArray()); // Returns buf< 0, 0, 0, 1 >\n}); \n\n// Use Packet Mode if you don't have flow control\n// It adds a length byte to the front of every packet\nbglib.setPacketMode(true);\n\nbglib.getPacket(bg.api.systemHello, function(err, packet) {\n  console.log(packet.getByteArray()); // Returns buf< 4, 0, 0, 0, 1 >\n});\n\nbglib.getPacket(bg.api.gapDiscover, [1, 0], function(err, response) {\n  bglib.getPacket(bg.api.systemHello, function(err, packet) {\n  console.log(packet); \n  /* Returns { mType: 0,\n  tType: 0,\n  payloadHighBits: 0,\n  payloadLowBits: 0,\n  cClass: 0,\n  cID: 1,\n  payload: <Buffer >,\n  packetMode: true,\n  callback: null }\n  */\n});\n```\n###Parsing Incoming Data\n\n```\nvar incomingBytes = new Buffer([ 128, 38, 6, 0, 189, 0, 108, 189, 40, 93, 28, 216, 1, 255, 27, 2, 1, 6, 17, 6, 186, 86, 137, 166, 250, 191, 162, 189, 1, 70, 125, 110, 56, 88, 171, 173, 5, 22, 10, 24, 7, 4]);\n\nbglib.parseIncoming(incomingBytes, function(err, parsedPackets) {\n  console.log(\"Parsed packets: \", parsedPackets);\n\n  // BGLib will automatically parse each packet into the values stated by the datasheet\n  // depending on what type of event/response it is. Below is an example for the discovered\n  // peripheral event that was passed in:\n  console.log(parsedPackets[0].response.packet_type) // 0\n  console.log(parsedPackets[0].response.sender) //  buf< 108, 189, 40, 93, 28, 216>\n  console.log(parsedPackets[0].response.address_type) // 1\n  console.log(parsedPackets[0].response.bond) // 255\n  console.log(parsedPackets[0].response.data) //  data object with flag types, raw data, etc\n  console.log(parsedPackets[0].rssi) // -67\n});\n```\n\nThe library will hold the current state of the packets so you can pass in pieces of a packet and it will return the entire parsed packet when it has all been passed in.\n\n###Thanks\nJRowberg deserves a special shout-out. Some of the code is modeled after [his Arduino bglib work](https://github.com/jrowberg/bglib).\n",
  "_id": "bglib@0.0.6",
  "_shasum": "3040724120bd55bdc996a03f3618c026db6cbd3b",
  "_from": "bglib@^0.0.6",
  "_resolved": "https://registry.npmjs.org/bglib/-/bglib-0.0.6.tgz"
}
