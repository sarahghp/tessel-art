{
  "name": "bleadvertise",
  "version": "0.1.1",
  "description": "Parse and generate Bluetooth Low Energy peripheral advertising packets",
  "keywords": [
    "bluetooth",
    "low",
    "energy",
    "packet",
    "advertise",
    "parse",
    "generate"
  ],
  "main": "index.js",
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "author": {
    "name": "Technical Machine",
    "email": "team@technical.io"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "directories": {
    "lib": "libraries",
    "test": "Testing"
  },
  "readme": "# bleadvertise\n\n## Description\nThis package can parse BLE slave advertisement packets into human readable/manipulatable objects and build advertisement packets from JSON objects. Based off of the BLE specification [data types](https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile).\n## Install\n```\nnpm install bleadvertise\n```\n\n## Usage\n\n### Packet Parsing\n\n```.js\nvar parser = require('bleadvertise');\n\n// Payload from your BLE device (make it into a buffer, if not already)\n\nvar payload = new Buffer([27, 2, 1, 6, 17, 6, 186, 86, 137, 166, 250, 191, 162, 189, 1, 70, 125, 110, 56, 88, 171, 173, 5, 22, 10, 24, 7, 4]);\n\n// Parse (little-endian by default)\nvar packets = parser.parse(payload);\n\nconsole.log(packets.length); // 3\nconsole.log(packets[0].type); // Flags\nconsole.log(packets[0].data); //  [ 'LE Limited Discoverable Mode' ]\n\nconsole.log(packets[1].type); // 'Incomplete List of 128-bit Service Class UUIDs'\nconsole.log(packets[1].data); // [ '0xba5689a6fabfa2bd01467d6e3858abad' ]\n```\n\n### Packet Structure\nThe returned packets in the packet array have the following structure:\n\n*packet*.type -> A string describing type of data (eg. \"Flags\", \"Complete List of 16-bit UUIDs\", etc.)\n\n*packet*.data -> The data parsed into appropriate data type (eg. String, Array of Octet Strings, unsigned int, etc.)\n\n*packet*.typeFlag -> the type flag parsed from packet\n\n*packet*.raw -> The raw buffer that was parsed\n\n### Endianness\n\nYou can specify the endianess that you want the buffers parsed with by using these functions:\n```.js\nparser.parseLE(buffer);\nparse.parseBE(buffer);\n```\n\n### Building Packets\n```.js\nvar parser = require('bleadverise');\n\n// Create your advertisement packet\nvar packet = {\n\tflags : [0x02, 0x04],\n\tincompleteUUID16 : ['2A00','2A01'],\n\tcompleteName : 'My Device'\n};\n\n// Serialize it into a Buffer\nvar payload = parser.serialize(packet);\n\nconsole.log(payload);\n// <Buffer 02 01 06 05 02 00 2a 01 2a 0a 09 4d 79 20 44 65 76 69 63 65>\n```\n\nYou can create an advertisement packet buffer from an object with the following keys and their corresponding data types:\n\n*flags* - An array of integers\n\n*incompleteUUID16* - An array of 16 bit UUID hex strings\n\n*completeUUID16* - An array of 16 bit UUID hex strings\n\n*incompleteUUID32* - An array of 32 bit UUID hex strings\n\n*completeUUID32* - An array of 32 bit UUID hex strings\n\n*incompleteUUID128* - An array of 128 bit UUID hex strings\n\n*completeUUID128* - An array of 128 bit UUID hex strings\n\n*shortName* - A string\n\n*completeName* - A string\n\n*txPower* - An integer value\n\n*deviceClass* - A hex string\n\n*pairingHashC* - A hex string\n\n*pairingRandomizerR* - A hex string\n\n*deviceId* - A hex string\n\n*smOOBFlags* - A hex string\n\n*intervalRange* - An array of hex strings\n\n*solicitationUUID16* - An array of 16 bit UUID hex strings\n\n*solicitationUUID32* - An array of 16 bit UUID hex strings\n\n*solicitationUUID128* - An array of 16 bit UUID hex strings\n\n*serviceData* - An array of hex strings\n\n*publicAddress* - An array of hex strings\n\n*randomAddress* - An array of hex strings\n\n*appearance* - An array of bytes\n\n*interval* - An array of hex strings\n\n*deviceAddress* - An array of hex strings\n\n*role* - An array of bytes or Buffer\n\n*pairingHashC256* - An array of hex strings\n\n*pairingRandomizerR256* - An array of hex strings\n\n*serviceUUID32* - An array of 32 bit UUID hex strings\n\n*serviceUUID128* - An array of 128 bit UUID hex strings\n\n*_3dInfo* - An array of bytes or Buffer\n\n*mfrData* - An array of bytes of Buffer\n\n## License\nMIT\n",
  "_id": "bleadvertise@0.1.1",
  "_shasum": "ce64398f329ec2dbaa605cb4b2ec8ded3d1f600a",
  "_from": "bleadvertise@*",
  "_resolved": "https://registry.npmjs.org/bleadvertise/-/bleadvertise-0.1.1.tgz"
}
