{
  "name": "avr-isp",
  "version": "0.0.3",
  "description": "Library to allow Tessel to act as an AVR In-System Programmer",
  "main": "index.js",
  "scripts": {
    "test": "tinytap -e 'tessel run {} ${ATTINY_PORT}' test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tessel/avr-isp.git"
  },
  "author": {
    "name": "Technical Machine",
    "email": "team@technical.io"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "keywords": [
    "tessel",
    "avr",
    "isp"
  ],
  "devDependencies": {
    "async": "^0.9.0",
    "tinytap": "~0.2.0"
  },
  "dependencies": {
    "async": "^0.9.0",
    "sync-queue": "0.0.1"
  },
  "hardware": {
    "test": false
  },
  "readme": "# Tessel AVR ISP\n\nUse this library to reflash the firmware on any Tessel module which uses an ATTiny44 microcontroller. Currently this includes the Ambient and IR modules.\n\n## Usage\n### Configuring Custom Firmware\nIf you have your own firmware you wish to flash to a module, first make sure it is compiled to [Intel HEX format](http://en.wikipedia.org/wiki/Intel_HEX). Next, place the `.hex` file in your project directory to ensure it gets uploaded to the Tessel with the script.\n\nFinally, set the configuration parameters in the `.use` method as in the example script.\n\n```js\nvar avrLib = require('../');\n\nvar isp = avrLib.use(tessel.port['A'], {\n  pageSize : 64, // Microcontroller memory page size in bytes. 64 bytes for the ATTiny44\n  fileName : 'my-firmware.hex' // File path to your custom firmware\n});\n\n```\n\n### ISP Object\nThe following methods are implemented to assist in flashing new firmware:\n\n&#x20;<a href=\"#api-isp-startProgramming-callback-error-Enters-the-AVR-device-into-a-programmable-state\" name=\"api-isp-startProgramming-callback-error-Enters-the-AVR-device-into-a-programmable-state\">#</a> isp<b>.startProgramming</b>( callback(error) )  \n Enters the AVR device into a programmable state.  \n\n&#x20;<a href=\"#api-isp-endProgramming-callback-Takes-the-device-out-of-programming-mode\" name=\"api-isp-endProgramming-callback-Takes-the-device-out-of-programming-mode\">#</a> isp<b>.endProgramming</b>( callback() )  \n Takes the device out of programming mode.  \n\n&#x20;<a href=\"#api-isp-eraseChip-callback-Tells-the-device-bootloader-to-overwrite-all-program-memory-bytes-with-0xff\" name=\"api-isp-eraseChip-callback-Tells-the-device-bootloader-to-overwrite-all-program-memory-bytes-with-0xff\">#</a> isp<b>.eraseChip</b>( callback() )  \n Tells the device bootloader to overwrite all program memory bytes with 0xff  \n\n&#x20;<a href=\"#api-isp-readSignature-callback-error-signature-Asks-device-for-its-device-signature\" name=\"api-isp-readSignature-callback-error-signature-Asks-device-for-its-device-signature\">#</a> isp<b>.readSignature</b>( callback(error, signature) )  \n Asks device for its device signature.  \n\n&#x20;<a href=\"#api-isp-programFuses-callback-error-Program-and-verify-the-device-s-fuse-bits-Currently-only-programs-and-verifies-the-low-bits-Currently-only-allows-the-hardcoded-fuse-bits-for-the-ATTiny-series-of-microcontrollers\" name=\"api-isp-programFuses-callback-error-Program-and-verify-the-device-s-fuse-bits-Currently-only-programs-and-verifies-the-low-bits-Currently-only-allows-the-hardcoded-fuse-bits-for-the-ATTiny-series-of-microcontrollers\">#</a> isp<b>.programFuses</b>( callback(error) )  \n Program and verify the device's fuse bits. Currently only programs and verifies the 'low' bits. Currently only allows the hardcoded fuse bits for the ATTiny series of microcontrollers.  \n\n&#x20;<a href=\"#api-isp-verifyFuses-fuses-fuseMask-callback-error-Verify-the-device-s-fuse-bits-No-need-to-call-this-if-programFuses-has-already-been-called\" name=\"api-isp-verifyFuses-fuses-fuseMask-callback-error-Verify-the-device-s-fuse-bits-No-need-to-call-this-if-programFuses-has-already-been-called\">#</a> isp<b>.verifyFuses</b>( fuses, fuseMask, callback(error) ) <i>Verify</i>&nbsp; the device's fuse bits\\. No need to call this if programFuses()  \n has already been called.  \n\n&#x20;<a href=\"#api-isp-readPagesFromHexFile-callback-error-pages-Will-read-and-parse-the-configured-firmware-hex-file-into-memory-pages-of-the-configured-length-Returns-array-of-page-buffers-through-callback\" name=\"api-isp-readPagesFromHexFile-callback-error-pages-Will-read-and-parse-the-configured-firmware-hex-file-into-memory-pages-of-the-configured-length-Returns-array-of-page-buffers-through-callback\">#</a> isp<b>.readPagesFromHexFile</b>( callback(error, pages) )  \n Will read and parse the configured firmware .hex file into memory pages of the configured length. Returns array of page buffers through callback.  \n\n&#x20;<a href=\"#api-isp-flashImage-pages-callback-Flashes-the-provided-array-of-page-buffers-onto-the-connected-AVR-device\" name=\"api-isp-flashImage-pages-callback-Flashes-the-provided-array-of-page-buffers-onto-the-connected-AVR-device\">#</a> isp<b>.flashImage</b>( pages, callback() )  \n Flashes the provided array of page buffers onto the connected AVR device.  \n\n&#x20;<a href=\"#api-isp-verifyImage-pages-callback-error-incorrect-_Not-yet-fully-supported_-Read-back-device-s-program-memory-and-verify-that-it-matches-the-provided-array-of-page-buffers-Currently-a-very-slow-process-Returns-number-of-non-matching-bytes-through-callback\" name=\"api-isp-verifyImage-pages-callback-error-incorrect-_Not-yet-fully-supported_-Read-back-device-s-program-memory-and-verify-that-it-matches-the-provided-array-of-page-buffers-Currently-a-very-slow-process-Returns-number-of-non-matching-bytes-through-callback\">#</a> isp<b>.verifyImage</b>( pages, callback(error, incorrect) )  \n _Not yet fully supported_ - Read back device's program memory and verify that it matches the provided array of page buffers. Currently a very slow process. Returns number of non-matching bytes through callback.  \n\n## Example\nUse the file `flashAmbient.js` in the examples folder of this repo to reflash the firmware on the ambient module.\n\n\n### License\nMIT or Apache 2.0, at your option  \n",
  "bugs": {
    "url": "https://github.com/tessel/avr-isp/issues"
  },
  "homepage": "https://github.com/tessel/avr-isp",
  "_id": "avr-isp@0.0.3",
  "_shasum": "11d52e1a9c259c04e587896a8c7b98f63a8449c1",
  "_from": "avr-isp@~0.0.3",
  "_resolved": "https://registry.npmjs.org/avr-isp/-/avr-isp-0.0.3.tgz"
}
